name: CI/CD pipeline for image scanning
on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Docker image to scan'
        required: true
        default: 'myapp:latest'
        type: string

jobs:
  # Reusable workflow for scanning
  scan_image:
    uses: ./.github/workflows/scan.yml  # Call the reusable scan.yml workflow
    with:
      docker_image: ${{ inputs.docker_image }}

  # Job for pushing image after scan
  image_push:
    needs: scan_image  # This job depends on scan_image
    runs-on: ubuntu-latest
    if: success()  # Only run this job if scan_image is successful

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image tarball from artifacts
        uses: actions/download-artifact@v3
        with:
          name: myapp-docker-image  # Artifact name should match the one uploaded in scan.yml
          path: ./  # Path to download the tarball to

      - name: Load Docker image from tarball
        run: |
          docker load -i ./myapp-image.tar  # Load the Docker image from the tarball

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push Docker image
        run: |
          docker tag ${{ inputs.docker_image }} ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker_image }}  
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker_image }}

      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install scripts 
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_IMAGE=${{ inputs.docker_image }}
          chmod +x script.sh      
          ./script.sh 

      # - name: sample check
      #   run: sleep 15

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests  
          pip install python-dotenv
          pip install termcolor
          pip install pyaml
          # Run the Python script
          python3 update_issue.py  
          
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}      
          REPO_NAME: ${{ github.event.repository.name  }}  
          
      - name: Check if the issue was updated
        run: |
          # Check the issue state or body update, you can add more tests here
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/6 \
            | jq '.body'  # Get the updated body of issue #6 to verify changes

      - name: kubectl commands
        run: |
          kubectl get pods -o wide
          kubectl get svc -o wide 

      - name: Sleep for 120 
        run: sleep 30
      - name: check Quota 
        run: python3 quota.py

          
