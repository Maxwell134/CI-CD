name: CI/CD pipeline for image scanning

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Docker image to scan'
        required: true
        default: 'myapp'
        type: string
      docker_tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'
        type: string
      Multiple_choices:
        description: 'Choose the stage to run'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - deploy      

jobs:
  # Reusable workflow for scanning
  scan_image:
    if: ${{ github.event.inputs.Multiple_choices == 'build' }}  # Only run this job if the choice is 'build'
    uses: ./.github/workflows/scan.yml  # Call the reusable scan.yml workflow
    with:
      docker_image: ${{ inputs.docker_image }}
      docker_tag: ${{ inputs.docker_tag }}

  # Job for pushing image after scan
  image_push:
    permissions:
      contents: read
      issues: write
    needs: scan_image  # This job depends on scan_image
    runs-on: ubuntu-latest
    if: success()  # Only run this job if scan_image is successful

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image tarball from artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.docker_image }}-${{ inputs.docker_tag }}-image  # Match the artifact name from scan.yml
          path: ./  # Path to download the tarball to (directory, not file name)

      - name: Load Docker image from tarball
        run: |
          docker load -i ./${{ inputs.docker_image }}-${{ inputs.docker_tag }}.tar  # Load the Docker image from the tarball

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push Docker image
        run: |
          docker tag ${{ inputs.docker_image }}:${{ inputs.docker_tag }} ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker_image }}:${{ inputs.docker_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker_image }}:${{ inputs.docker_tag }}

  # Job for deploying to AKS
  aks_deploy:
    if: ${{ github.event.inputs.Multiple_choices == 'deploy' }}  # Only run this job if the choice is 'deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install scripts
        run: |
          chmod +x script.sh      
          ./script.sh 
          
      - name: Run Helm install with dynamic image repository
        run: |
          echo "Running Helm install with dynamic image repository"
          
          # Corrected Helm install command with dynamic variables
          helm install tommy myrelease \
            --set image.repository="${DOCKER_USERNAME}/${{ inputs.docker_image }}" \
            --set image.tag="${{ inputs.docker_tag }}"
            
          # Check the Kubernetes nodes and pods
          kubectl get nodes
          kubectl get pods
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE: ${{ inputs.docker_image }}
          DOCKER_TAG: ${{ inputs.docker_tag }}

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install requests  
          pip install python-dotenv
          pip install termcolor
          pip install pyaml

      - name: Create issue
        run: | 
          python3 issue.py 
          sleep 60
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}

      - name: Install dependencies
        run: |
          python3 update_issue.py  
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}

      - name: Check if the issue was updated
        run: |
          # Fetch the latest issue from the repository (sorted by creation date)
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/issues?sort=created&direction=desc" \
           | jq '.[0].body'  # Get the body of the most recent issue
      
      

      - name: kubectl commands
        run: |
          kubectl get nodes 
          kubectl get pods -o wide
          kubectl get svc -o wide 

      - name: Sleep for 5 minutes
        run: sleep 120

      - name: Check Quota
        run: python3 quota.py

      - name: Final kubectl commands
        run: |
          kubectl get pods -o wide
          kubectl get svc -o wide

      - name: Pod logs
        run: |
          chmod +x pods_logs.sh 
          ./pods_logs.sh
